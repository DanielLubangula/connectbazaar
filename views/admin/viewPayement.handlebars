<html><head><base href=".">
<title>Admin Dashboard - Gestion des Paiements</title>
<style>
:root {
  --primary-color: #1a1a1a;
  --secondary-color: #FFD700;
  --success-color: #28a745;
  --warning-color: #ffc107;
  --danger-color: #dc3545;
}

.admin-dashboard {
    max-width: 1400px;
    margin: 20px auto;
    padding: 20px;
    font-family: Arial, sans-serif;
}

.header-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 15px;
}

.export-btn {
    padding: 10px 20px;
    background: var(--primary-color);
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
}

.export-btn svg {
    width: 16px;
    height: 16px;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.stat-card {
    background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
    padding: 20px;
    border-radius: 10px;
    color: white;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.stat-value {
    font-size: 28px;
    font-weight: bold;
    color: var(--secondary-color);
    margin: 10px 0;
}

.search-controls {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.search-input {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
}

.payments-table {
    width: 100%;
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.payments-table table {
    width: 100%;
    border-collapse: collapse;
}

.payments-table th, .payments-table td {
    padding: 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
}

.payments-table th {
    background: var(--primary-color);
    color: white;
}

.status-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: bold;
}

.status-approved { background: #d4edda; color: #155724; }
.status-pending { background: #fff3cd; color: #856404; }
.status-rejected { background: #f8d7da; color: #721c24; }

.action-buttons {
    display: flex;
    gap: 5px;
}

.action-btn {
    background-color: #6c757d;
    padding: 5px 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    color: white;
}

.approve-btn { background: var(--success-color); }
.reject-btn { background: var(--danger-color); }
.delete-btn { background: #6c757d; }

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background: white;
    padding: 20px;
    border-radius: 10px;
    max-width: 500px;
    width: 90%;
}

.note-field {
    width: 100%;
    min-height: 100px;
    margin: 10px 0;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

/* Add to existing CSS */
.payment-proof {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 4px;
    cursor: pointer;
}

.proof-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.9);
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

.proof-modal img {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
}

.proof-modal-close {
    position: absolute;
    top: 20px;
    right: 20px;
    color: white;
    font-size: 30px;
    cursor: pointer;
}

.header {
            background-color: #2c3e50;
            color: white;
            padding: 1rem;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav {
            display: flex;
            gap: 1rem;
            margin-top: 0.5rem;
        }

        .nav-link {
            color: #bdc3c7;
            text-decoration: none;
            padding: 0.5rem;
        }

        .nav-link.active {
            color: white;
            border-bottom: 2px solid white;
        }

@media (max-width: 768px) {
    .payments-table {
        overflow-x: auto;
        display: block;
    }
    
    .action-buttons {
        flex-direction: column;
    }
    
    .header-actions {
        flex-direction: column;
        align-items: stretch;
    }
}
</style>
</head>
<body>

<header class="header">
        <h1>Admin Dashboard</h1>
        <nav class="nav">
            <a href="/deliver/admin/connect/viewUserAdmin" class="nav-link">Tableau de bord</a>
            <a href="/deliver/admin/connect/viewProduct" class="nav-link">voir les produits</a>
            <a href="/deliver/admin/connect/payement" class="nav-link active">voir les payements</a>
        </nav>
    </header>

<div class="admin-dashboard">
    <div class="header-actions">
        <h1>Gestion des Paiements</h1>
        <button class="export-btn" onclick="exportData()">
            <svg viewBox="0 0 24 24" fill="white">
                <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
            </svg>
            Exporter les donn&#xe9;es
        </button>
    </div>
    
    <div class="stats-grid" id="stats-container">
        {{!-- ici seront injecté les statistiques --}}
    </div>

    <div class="search-controls">
        <input type="text" class="search-input" id="nameSearch" placeholder="Rechercher par nom">
        <input type="text" class="search-input" id="emailSearch" placeholder="Rechercher par email">
        <input type="date" class="search-input" id="dateSearch">
        <select class="search-input" id="statusFilter">
            <option value>Tous les statuts</option>
            <option value="approved">Approuv&#xe9;</option>
            <option value="Pending">En attente</option>
            <option value="rejected">Rejet&#xe9;</option>
        </select>
    </div>

    <div class="payments-table">
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Client</th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>Montant</th>
                    <th>Date</th>
                    <th>Statut</th>
                    <th>Preuve</th>
                    <th>Notes</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="paymentsTableBody">
                <!-- Rempli par JavaScript -->
            </tbody>
        </table>
    </div>
</div>

<div id="noteModal" class="modal">
    <div class="modal-content">
        <h3>Ajouter une note</h3>
        <textarea class="note-field" id="noteText" placeholder="Entrez votre note ici..."></textarea>
        <div class="action-buttons">
            <button class="action-btn approve-btn" onclick="saveNote()">Sauvegarder</button>
            <button class="action-btn reject-btn" onclick="closeModal()">Annuler</button>
        </div>
    </div>
</div>

<!-- Add before closing body tag -->
<div id="proofModal" class="proof-modal">
    <span class="proof-modal-close" onclick="closeProofModal()">&#xd7;</span>
    <img id="proofModalImage" src alt="Payment Proof">
</div>

<script>
  async function fetchPayments() {
    try {
      const response = await fetch('/deliver/api/payments');
      const payments = await response.json();
      renderPayments(payments);
    } catch (error) {
      console.error('Erreur lors de la récupération des paiements :', error);
    }
  }

  function getStatusBadgeHTML(status) {
    const statusClasses = {
      approved: "status-approved",
      pending: "status-pending",
      rejected: "status-rejected"
    };
    const statusLabels = {
      approved: "Approuvé",
      pending: "En attente",
      rejected: "Rejeté"
    };
    return `<span class="status-badge ${statusClasses[status]}">${statusLabels[status]}</span>`;
  }

  function renderPayments(payments) {
    const tbody = document.getElementById('paymentsTableBody');
    tbody.innerHTML = payments.map(payment => `
      <tr>
        <td>${payment._id}</td>
        <td>${payment.name}</td>
        <td>${payment.email}</td>
        <td>${payment.phone}</td>
        <td>€${payment.amount}</td>
        <td>${new Date(payment.createdAt).toLocaleDateString()}</td>
        <td>${(payment.status)}</td>
        
        <td>
          <img src="${payment.paymentProof}" 
               class="payment-proof" 
               onclick="showProofModal('${payment.paymentProof}')" 
               alt="Payment proof">
        </td>
        <td>${payment.notes || '-'}</td>
        <td>
          <div class="action-buttons">
            <button class="action-btn approve-btn" onclick="updateStatus('${payment._id}', 'approved')">Approuver</button>
            <button class="action-btn reject-btn" onclick="updateStatus('${payment._id}', 'rejected')">Rejeter</button>
            <button class="action-btn" onclick="addNote('${payment._id}')">Note</button>
          </div>
        </td>
      </tr>
    `).join('');
  }

  async function updateStatus(paymentId, newStatus) {
    try {
      const response = await fetch(`/deliver/api/payments/${paymentId}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus })
      });
      if (response.ok) {
        fetchPayments(); // Refresh the table
      } else {
        console.error('Erreur lors de la mise à jour du statut');
      }
    } catch (error) {
      console.error('Erreur lors de la mise à jour du statut :', error);
    }
  }

  function addNote(paymentId) {
    const modal = document.getElementById('noteModal');
    modal.style.display = 'flex';
    modal.dataset.paymentId = paymentId;
  }

  async function saveNote() {
    const modal = document.getElementById('noteModal');
    const paymentId = modal.dataset.paymentId;
    const noteText = document.getElementById('noteText').value;
    try {
      const response = await fetch(`/deliver/api/payments/${paymentId}/note`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ notes: noteText })
      });
      if (response.ok) {
        fetchPayments(); // Refresh the table
      } else {
        console.error('Erreur lors de la sauvegarde de la note');
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde de la note :', error);
    }
    closeModal();
  }

  async function exportData() {
    try {
      const response = await fetch('/deliver/api/payments/export');
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'paiements.csv';
      link.click();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Erreur lors de l\'exportation des données :', error);
    }
  }

  function showProofModal(proofUrl) {
    const modal = document.getElementById('proofModal');
    const modalImg = document.getElementById('proofModalImage');
    modal.style.display = 'flex';
    modalImg.src = proofUrl;
  }

  function closeProofModal() {
    const modal = document.getElementById('proofModal');
    modal.style.display = 'none';
  }

  function closeModal() {
    document.getElementById('noteModal').style.display = 'none';
  }

  document.getElementById('proofModal').addEventListener('click', function (e) {
    if (e.target === this) {
      closeProofModal();
    }
  });

  document.querySelectorAll('.search-input').forEach(input => {
    input.addEventListener('input', async () => {
      const nameSearch = document.getElementById('nameSearch').value.toLowerCase();
      const emailSearch = document.getElementById('emailSearch').value.toLowerCase();
      const dateSearch = document.getElementById('dateSearch').value;
      const statusFilter = document.getElementById('statusFilter').value;

      try {
        const query = new URLSearchParams({
          name: nameSearch,
          email: emailSearch,
          date: dateSearch,
          status: statusFilter
        });
        const response = await fetch(`/deliver/api/payments/search?${query.toString()}`);
        const payments = await response.json();
        renderPayments(payments);
      } catch (error) {
        console.error('Erreur lors de la recherche :', error);
      }
    });
  });

  // Fetch payments on page load
  fetchPayments();

  async function fetchStats() {
            try {
                       const baseURL =
                window.location.origin.includes('localhost')
                  ? 'http://localhost:5000'
                  : 'https://connectbazaar.onrender.com';

                //const response = await fetch('http://localhost:5000/deliver/api/payments/stats');
                const response = await fetch(`${baseURL}/deliver/api/payments/stats`);
                if (!response.ok) {
                    throw new Error('Erreur lors de la récupération des statistiques');
                }
                const stats = await response.json();

                // Construire dynamiquement les cartes
                const statsContainer = document.getElementById('stats-container');
                statsContainer.innerHTML = `
                    <div class="stat-card">
                        <div class="stat-label">Total des paiements</div>
                        <div class="stat-value">€${stats.totalPayments.toLocaleString()}</div>
                        <div class="stat-label">Ce mois</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Paiements en attente</div>
                        <div class="stat-value">${stats.pendingPayments}</div>
                        <div class="stat-label">À traiter</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Taux d'approbation</div>
                        <div class="stat-value">${stats.approvalRate}%</div>
                        <div class="stat-label">Sur 30 jours</div>
                    </div>
                `;
            } catch (error) {
                console.error('Erreur :', error);
                document.getElementById('stats-container').innerHTML = `
                    <p style="color: red;">Impossible de charger les statistiques.</p>
                `;
            }
        }

        // Charger les statistiques au chargement de la page
        fetchStats();
</script>

</body>
</html>