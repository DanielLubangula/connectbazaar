<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{nomSite}}</title>
    {{!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css"> --}}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="/style/output.css" rel="stylesheet">
    <link href="/style/navbarfooter.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <script defer src="/js/connexionSocket.js"></script>
    <script defer src="/js/notification.js"></script>
    <script src="/js/notifAllPage.js"></script>

    {{!-- <script defer src="/js/socket-client.js"></script>
    <script defer src="/js/spinner.js"></script> --}}
    {{#if navbarVendor}}
        {{!-- <script defer src="/js/sidebarVendor.js"></script> --}}
        <link rel="stylesheet" href="/style/sidebarVendor.css">
    {{/if}}
</head>
   <style>
         /* Noticatio message */
 .notification {
  position: fixed;
  top: -100px; /* Start above the viewport */
  left: 50%;
  transform: translateX(-50%);
  background-color: #ffffff;
  color: #333;
  padding: 15px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 15px;
  transition: top 0.5s ease-in-out;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  z-index: 1000;
  min-width: 300px;
  max-width: 400px;
  border: 1px solid #eaeaea;
}

.notification.show {
  top: 20px; /* Slide down to this position */
}

.profile-pic {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: #e0e0e0;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.profile-pic svg {
  width: 24px;
  height: 24px;
  fill: #666;
}

.notification-content {
  flex-grow: 1;
}

.notification-header {
  font-weight: bold;
  margin-bottom: 4px;
  color: #333;
  font-size: 14px;
}

.notification-message {
  color: #666;
  font-size: 13px;
}

.notification-time {
  color: #999;
  font-size: 11px;
  margin-top: 4px;
}

.close-button {
  background: none;
  border: none;
  color: #999;
  cursor: pointer;
  font-size: 20px;
  padding: 0;
  line-height: 1;
  align-self: flex-start;
}

.close-button:hover {
  opacity: 0.8;
}
 /* Noticatio message */
 /* Notifications */
.notification-icon {
  position: relative;
  display: inline-block;
  margin-right: 20px;
}

.notification-icon .icon {
  width: 24px;
  height: 24px;
  color: white;
}

.notification-icon .notification-count {
  position: absolute;
  top: -8px;
  right: -10px;
  background-color: red;
  color: white;
  font-size: 14px;
  font-weight: bold;
  border-radius: 50%;
  padding: 2px 6px;
  text-align: center;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}

.notification-text {
  display: none;
  font-size: 14px;
  margin-left: 5px;
  color: white;
}

    </style>
<body>
    {{#if navbarVendor}}
        {{!-- {{>navbarVendor}} --}}
             <!-- Header (same as orders page) -->
            <div id="overlay" class="overlay"></div>
        <div class="container mx-auto mt-6 flex">
        <!-- Sidebar (same as orders page) -->
        {{!-- {{>sidebarVendor}} --}}

    {{/if}}
    {{#if sidebarVendorOnly}}
             <!-- Header (same as orders page) -->
            <div id="overlay" class="overlay"></div>
        <div class="container mx-auto mt-6 flex">
        <!-- Sidebar (same as orders page) -->
        {{!-- {{>sidebarVendor}} --}}

    {{/if}}

    {{{body}}}
    {{#if user}}
      {{#if navbarFooter}}
        {{> navbarfooter}}
      {{/if}}
    {{/if}}
    {{#if vendor}}
      {{#if navbarFooter}}
        {{> navbarfooter}}
      {{/if}}
    {{/if}}
    
<div class="notification" id="notification">
  <div class="profile-pic">
    <svg viewBox="0 0 24 24">
      <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
    </svg>
  </div>
  <div class="notification-content">
    <div class="notification-header" id="notification-name"></div>
    <div class="notification-message" id="notification-text"></div>
    <div class="notification-time"></div>
  </div>
  <button class="close-button" onclick="hideNotification()">×</button>
</div>

</body>
    <script>
        const socketMain = io();

        
    let mapMain = new Map()
let utilisateurIdMain = ""
mapMain.set("1",{{{json vendor}}})
mapMain.set("2",{{{json user}}})

mapMain.forEach((value, key) => {
  if (value){
    console.log(value)
    utilisateurIdMain = value._id
  }
})

        // Adapter le nombre de message notification
socketMain.on("updateNotif", async (data) => {

  const allInfo = data.allInfo;
  const infoUser = data.infoUser;

  if (!allInfo || allInfo.length === 0) {
    console.log("Aucune notification disponible.");
    if (document.querySelector('.numberNotif')) document.querySelector('.numberNotif').innerHTML = "0";
    
    showNotification("Aucune notification", "Pas de nouveaux messages", null, null);
    return;
  }

  // Récupérer la dernière notification
  const latestNotification = allInfo[allInfo.length - 1];

  // Construire le lien de redirection
  const roomParts = data.room.split("-");
  const firstId = roomParts.find((id) => id !== utilisateurIdMain); // Récupère l'ID différent de l'utilisateur actuel
  const lastId = roomParts[roomParts.length - 1]; // Le dernier ID reste inchangé

 const baseURLNotif =
          window.location.origin.includes('localhost')
            ? 'http://localhost:5000'
            : 'https://connectbazaar.onrender.com';

  const chatLink = `${baseURLNotif}/deliver/chat/${firstId}/${lastId}`;
  //const chatLink = `http://192.168.43.14:5000/deliver/chat/${firstId}/${lastId}`;

  // Détecter le type de contenu et formater le message
  const contentType = detectContentType(latestNotification);
  const message = formatMessage(latestNotification, contentType);

  // Mettre à jour le compteur de notifications
  console.log('numberNotif', document.querySelector('.numberNotif'))
   if (document.querySelector('.numberNotif')) document.querySelector('.numberNotif').innerHTML = data.number;

   // Réajuster le nom au cas où il s'agit d'un acheteur
    if (infoUser.companyName === undefined){
      infoUser.companyName = data.infoUser.username
    }

  // Afficher la notification avec le lien
  showNotification(infoUser.companyName, message, chatLink, infoUser.profileImagePath);
});


/************** Début Affichage de notification ***************************/ 
let notificationTimeoutMain;

function showNotification(name, message, link, imagePath) {
  const notification = document.getElementById('notification');
  const notificationName = document.getElementById('notification-name');
  const notificationText = document.getElementById('notification-text');
  const notificationTime = document.querySelector('.notification-time');
  const profilePic = document.querySelector('.profile-pic svg');

  let msg = truncateText(message, 23)

  // Mettre à jour le contenu de la notification
  notificationName.textContent = name;
  notificationText.textContent = msg;
  notificationTime.textContent = "À l'instant";

  // Afficher l'image de profil si elle est disponible
  if (imagePath) {
    console.log('.profile-pic', document.querySelector('.profile-pic'))
    //profilePic.style.display = "none";
    notification.querySelector('.profile-pic').innerHTML = `<img src="${imagePath}" alt="${name}" />`;
  } else {
    profilePic.style.display = "block";
  }

  // Ajouter le lien autour de la notification
  if (link) {
    notification.onclick = () => {
      window.location.href = link;
    };
    notification.style.cursor = "pointer";
  } else {
    notification.onclick = null;
    notification.style.cursor = "default";
  }

  // Afficher la notification
  notification.classList.add('show');

  // Masquer la notification après 10 secondes
  if (notificationTimeoutMain) {
    clearTimeout(notificationTimeoutMain);
  }
  notificationTimeoutMain = setTimeout(() => {
    hideNotification();
  }, 10000);
}

function hideNotification() {
  const notification = document.getElementById('notification');
  notification.classList.remove('show');
  
  // Clear timeout
  if (notificationTimeoutMain) {
    clearTimeout(notificationTimeoutMain);
  }
}

// Détection du type de contenu
function detectContentType(notification) {
  if (notification.content) return "text";
  if (notification.images && notification.images.length > 0) return "image";
  if (notification.audios && notification.audios.length > 0) return "audio";
  return "unknown";
}

// Formatage du message
function formatMessage(notification, type) {
  switch (type) {
    case "text":
      return notification.content;
    case "image":
      return "Une image a été envoyée.";
    case "audio":
      return "Un message audio a été envoyé.";
    default:
      return "Notification inconnue.";
  }
}

function truncateText(text, maxLength) {
  if (!text) return

  if (text.length > maxLength) {
    return text.slice(0, maxLength) + '...';
  }
  return text;
}

/************** Fin Affichage de notification ***************************/ 

    </script>
</html>