Pour connecter votre projet √† Amazon S3 et adapter la fonction de t√©l√©chargement des images afin de stocker directement les fichiers sur S3, voici les √©tapes √† suivre :

### 1. Installer les d√©pendances n√©cessaires
Ajoutez les biblioth√®ques suivantes √† votre projet si elles ne sont pas encore install√©es :

```bash
npm install aws-sdk multer multer-s3 sharp
```

- `aws-sdk` : Biblioth√®que pour interagir avec AWS.
- `multer-s3` : Int√©gration de Multer avec S3.

---

### 2. Configurer AWS SDK et Multer pour S3
Cr√©ez un fichier de configuration pour AWS (par exemple, `config/aws.js`) :

```javascript
const AWS = require("aws-sdk");

// Configuration d'AWS avec les cl√©s d'acc√®s (assurez-vous que ces valeurs soient s√©curis√©es)
AWS.config.update({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID, // Cl√© d'acc√®s
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY, // Cl√© secr√®te
  region: process.env.AWS_REGION, // R√©gion (ex : us-east-1)
});

const s3 = new AWS.S3();

module.exports = s3;
```

---

### 3. Adapter la fonction `uploadImage` pour utiliser S3

Voici comment adapter votre fonction pour uploader l'image directement dans un bucket S3 :

```javascript
const multer = require("multer");
const multerS3 = require("multer-s3");
const sharp = require("sharp");
const User = require("../models/User"); // Mod√®le User (modifiez le chemin selon votre projet)
const s3 = require("../config/aws");

// Configuration de Multer pour S3
const uploadImg = multer({
  storage: multerS3({
    s3: s3,
    bucket: "votre-nom-de-bucket", // Nom de votre bucket
    metadata: (req, file, cb) => {
      cb(null, { fieldName: file.fieldname });
    },
    key: (req, file, cb) => {
      const filename = `photoProfilUser/${Date.now()}-${Math.round(
        Math.random() * 1e9
      )}.jpg`; // G√©n√©rer un nom unique
      cb(null, filename);
    },
  }),
  limits: { fileSize: 5 * 1024 * 1024 }, // Limite de 5 Mo
}).single("image");

// Fonction de mise √† jour de l'image de profil
exports.uploadImage = async (req, res) => {
  // Utiliser multer pour g√©rer le t√©l√©chargement de l'image
  uploadImg(req, res, async function (err) {
    if (err) {
      return res.status(500).json({
        message: "Erreur lors du t√©l√©chargement de l'image",
        error: err,
      });
    }

    try {
      // V√©rifier si un fichier a √©t√© t√©l√©charg√©
      if (!req.file) {
        return res
          .status(400)
          .json({ message: "Veuillez t√©l√©charger une image." });
      }

      const userId = req.session.user._id;

      // R√©cup√©rer le vendeur depuis la base de donn√©es
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ message: "Utilisateur non trouv√©." });
      }

      // Supprimer l'ancienne image du bucket S3 si elle existe
      if (user.profileImagePath) {
        const oldKey = user.profileImagePath.replace(/^\/photoProfilUser\//, "photoProfilUser/");
        await s3
          .deleteObject({
            Bucket: "votre-nom-de-bucket",
            Key: oldKey,
          })
          .promise();
      }

      // Mettre √† jour le chemin de l'image de profil dans la base de donn√©es
      user.profileImagePath = `/${req.file.key}`; // Cl√© du fichier dans S3
      await user.save();

      // Mettre √† jour la session utilisateur
      req.session.user = user;

      res.json({
        message: "Image de profil mise √† jour avec succ√®s!",
        profileImagePath: user.profileImagePath, // Nouveau chemin de l'image
      });
    } catch (err) {
      console.error("Erreur lors de la mise √† jour de l'image de profil:", err);
      res.status(500).json({
        message:
          "Une erreur est survenue lors de la mise √† jour de l'image de profil.",
      });
    }
  });
};
```

---

### Explications des modifications :
1. **Utilisation de `multer-s3`** : Les fichiers sont upload√©s directement dans S3 gr√¢ce √† Multer.
2. **Nom unique pour les fichiers** : Les images sont stock√©es dans le sous-dossier `photoProfilUser` avec des noms g√©n√©r√©s dynamiquement.
3. **Suppression des anciennes images** : Avant d'uploader une nouvelle image, l'ancienne image est supprim√©e de S3 pour √©viter d'accumuler des fichiers inutiles.
4. **Stockage des chemins dans MongoDB** : Le chemin de l'image dans S3 est enregistr√© dans la base de donn√©es.

---

### 4. Ajouter les variables d'environnement
Ajoutez vos informations AWS dans votre fichier `.env` :

```env
AWS_ACCESS_KEY_ID=VotreAccessKeyID
AWS_SECRET_ACCESS_KEY=VotreSecretAccessKey
AWS_REGION=VotreR√©gion (ex : us-east-1)
```

---

### 5. Exemple de r√©ponse API :
Une fois l'image upload√©e, votre API retournera quelque chose comme ceci :

```json
{
  "message": "Image de profil mise √† jour avec succ√®s!",
  "profileImagePath": "/photoProfilUser/1674748323415-123456789.jpg"
}
```

---

### 6. Afficher les images
Pour afficher les images dans votre application front-end, construisez l'URL publique √† partir du chemin de l'image :

```javascript
const s3BaseUrl = "https://votre-nom-de-bucket.s3.amazonaws.com";
const imageUrl = `${s3BaseUrl}${user.profileImagePath}`;
```

Cela permettra de r√©cup√©rer les images directement depuis S3.

---

Si vous avez des questions ou rencontrez des erreurs, faites-le-moi savoir ! üòä